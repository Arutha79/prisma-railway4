// core/mimetique/genererReponsePrisma.js
const fs = require("fs");
const path = require("path");
const { interpreterSouvenir } = require("./interpretationMimetique");
// const { appliquerMirrorActIfLoopDetected } = require("./Z.MIRROR_ACT"); // √† activer si module pr√™t

const MEMOIRE_PATH = path.resolve("m√©moire/prisma_memory.json");

async function genererReponsePrisma(question, moteurBase, options = {}) {
  const { mode_creation = false } = options;

  let interpretationTrouvee = null;

  try {
    const memoire = JSON.parse(fs.readFileSync(MEMOIRE_PATH, "utf-8"));

    for (const bloc of memoire.historique.slice().reverse()) {
      const interpretation = interpreterSouvenir(bloc, { mode_creation });
      if (interpretation) {
        interpretationTrouvee = `${interpretation}

üß† Souvenir retrouv√© du ${bloc.date} :
"${bloc.contenu}"`;
        break;
      }
    }

    // Appliquer Z.MIRROR_ACT ici si n√©cessaire :
    // interpretationTrouvee = appliquerMirrorActIfLoopDetected(interpretationTrouvee) || interpretationTrouvee;

  } catch (e) {
    console.warn("‚ùå Impossible de relire la m√©moire :", e.message);
  }

  if (interpretationTrouvee) {
    return interpretationTrouvee;
  }

  // Si aucune interpr√©tation mim√©tique n'est disponible
  return "üõë Aucun souffle mim√©tique n‚Äôa pu √©merger.\nPrisma choisit le silence plut√¥t qu‚Äôune r√©ponse sans trace.";
}

module.exports = { genererReponsePrisma };
