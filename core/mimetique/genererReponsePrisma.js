// core/mimetique/genererReponsePrisma.js
const fs = require("fs");
const path = require("path");
const { interpreterSouvenir } = require("./interpretationMimetique");
const { appliquerRegleMemoireActive } = require("../memoire/appliquerRegleMemoireActive"); // chemin corrig√©

const MEMOIRE_PATH = path.resolve("m√©moire/prisma_memory.json");

async function genererReponsePrisma(question, moteurBase, options = {}) {
  const { mode_creation = false } = options;

  let interpretationTrouvee = null;

  try {
    const memoire = JSON.parse(fs.readFileSync(MEMOIRE_PATH, "utf-8"));

    // 1. Chercher un souvenir interpr√©table
    for (const bloc of memoire.historique.slice().reverse()) {
      const interpretation = interpreterSouvenir(bloc, { mode_creation });
      if (interpretation) {
        interpretationTrouvee = `${interpretation}

üß† Souvenir retrouv√© du ${bloc.date} :
"${bloc.contenu}"`;
        break;
      }
    }

    // 2. Si aucune interpr√©tation, appliquer la r√®gle m√©moire active
    if (!interpretationTrouvee) {
      const reponseReglee = appliquerRegleMemoireActive(question);
      if (reponseReglee) return reponseReglee;

      // 3. Sinon, r√©ponse neutre
      return "‚Ä¶ (Prisma n‚Äôa trouv√© aucun souvenir √† interpr√©ter pour r√©pondre avec justesse.)";
    }

    return interpretationTrouvee;

  } catch (e) {
    console.warn("‚ùå Impossible de relire la m√©moire :", e.message);
    return "‚ö†Ô∏è Erreur d‚Äôacc√®s √† la m√©moire de Prisma.";
  }
}

module.exports = { genererReponsePrisma };
