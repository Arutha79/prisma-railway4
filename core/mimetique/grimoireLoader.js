// grimoireLoader.js
// Charge le grimoire mim√©tique actif √† partir du registre de validation

const fs = require("fs");
const path = require("path");

const registrePath = path.resolve(__dirname, "../m√©moire/registreValidationMim√©tique.json");

function chargerGrimoireActif() {
  if (!fs.existsSync(registrePath)) {
    console.error("‚ùå Registre de validation introuvable :", registrePath);
    return null;
  }

  let registre;
  try {
    registre = JSON.parse(fs.readFileSync(registrePath, "utf-8")).registre_validation;
  } catch (err) {
    console.error("‚ùå Erreur de parsing JSON du registre :", err.message);
    return null;
  }

  const actif = registre?.grimoire_actif;
  if (!actif || !actif.statut_mim√©tique?.activation) {
    console.warn("‚ö†Ô∏è Aucun grimoire actif valid√© n'est activ√©.");
    return null;
  }

  const fichierNom = actif.fichier;

  // üîê S√©curit√© : valider le nom de fichier
  if (!/^[\w\-\.]+\.json$/.test(fichierNom)) {
    console.error("‚ùå Nom de fichier grimoire non autoris√© :", fichierNom);
    return null;
  }

  const grimoirePath = path.resolve(__dirname, `../m√©moire/${fichierNom}`);
  if (!fs.existsSync(grimoirePath)) {
    console.error("‚ùå Fichier grimoire introuvable :", grimoirePath);
    return null;
  }

  let grimoire;
  try {
    grimoire = JSON.parse(fs.readFileSync(grimoirePath, "utf-8"));
  } catch (err) {
    console.error("‚ùå Erreur de parsing JSON du grimoire :", err.message);
    return null;
  }

  // ‚úÖ V√©rification de structure
  if (!grimoire || !Array.isArray(grimoire.structure)) {
    console.error("‚ùå Le grimoire charg√© n'a pas de structure mim√©tique valide.");
    return null;
  }

  console.log(`üìñ Grimoire actif charg√© : ${fichierNom} (${grimoire.structure.length} entr√©es)`);

  return {
    grimoire,
    meta: actif,
    chemin: grimoirePath,
    horodatage: new Date().toISOString()
  };
}

module.exports = {
  chargerGrimoireActif
};
